---
import { getLocaleByPath, getRelativeLocaleUrl } from "astro:i18n";
import HeaderLink from "./HeaderLink.astro";
import { Icon } from "astro-icon/components";
import LanguageSelector from "./svelte/LanguageSelector.svelte";
import { getLangFromUrl, useTranslations } from "src/i18n/utils";
import ThemSwitcher from "./svelte/ThemSwitcher.svelte";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// localed
const productsURL = getRelativeLocaleUrl(lang, "products");
const aboutURL = getRelativeLocaleUrl(lang, "about");
const contactURL = getRelativeLocaleUrl(lang, "contact");
const homeURL = getRelativeLocaleUrl(lang, "/");
const currentPath = Astro.url.pathname;

const items = [
	{
		label: "English",
		value: "en",
		href: currentPath.replace(/\/(en|ar)\/?/g, "/en/")
	},
	{
		label: "العربية",
		value: "ar",
		href: currentPath.replace(/\/(en|ar)\/?/g, "/ar/")
	}
];
---

<header
	class="flex flex-row-reverse gap-4 w-full justify-between items-center p-8 border-b-2 border-skin-base shadow-2xl z-20 filter backdrop-blur-lg sticky top-0"
	dir={lang === "en" ? "ltr" : "rtl"}
	id="header"
	transition:animate={"slide"}
>
	<a
		href={`/${lang}`}
		class="flex flex-col justify-center items-center md:w-[15rem] w-[10rem]"
	>
		<img
			src="/machlist-logo.png"
			alt="Machlist logo"
			class="object-cover block w-[clamp(10rem,10vw,15rem)]"
		/>
		<span class="text-[clamp(1.5rem,3vw,3rem)] w-full text-center">
			{t("header.title")}
		</span>
	</a>
	<div class="h-[5rem] w-2 rounded-lg bg-skin-base shadow-lg"></div>
	<nav
		class="flex-1 flex py-4 px-2 gap-4 justify-start items-center overflow-x-auto overflow-y-visible whitespace-nowrap"
	>
		<HeaderLink highlighted={currentPath == homeURL} link={homeURL}>
			<span class="flex gap-2">
				<Icon name="ic:twotone-home" />
				{t("nav.home")}
			</span>
		</HeaderLink>
		<HeaderLink
			highlighted={currentPath.includes(productsURL)}
			link={productsURL}
		>
			<span class="flex gap-2">
				<Icon name="ic:twotone-shopping-cart" />
				{t("nav.products")}
			</span>
		</HeaderLink>
		<HeaderLink
			highlighted={currentPath.includes(aboutURL)}
			link={aboutURL}
		>
			<span class="flex gap-2">
				<Icon name="ic:twotone-info" />
				{t("nav.about")}
			</span>
		</HeaderLink>
		<HeaderLink
			highlighted={currentPath.includes(contactURL)}
			link={contactURL}
		>
			<span class="flex gap-2">
				<Icon name="ic:twotone-contact-support" />
				{t("nav.contact")}
			</span>
		</HeaderLink>
		<div
			class="px-4 py-2 text-3xl text-nowrap min-w-[10rem] rounded-md transition-all duration-150 flex-shrink-0"
		>
			<LanguageSelector client:visible locale={lang} items={items}>
				<span slot="check">
					<Icon name="ic:round-check" />
				</span>
				<Icon name="radix-icons:double-arrow-down" />
			</LanguageSelector>
		</div>
		<div
			class="w-[7rem] rounded-md transition-all duration-150 flex-shrink-0"
		>
			<ThemSwitcher client:only>
				<Fragment slot="light">
					<Icon name="radix-icons:sun" />
				</Fragment>
				<Fragment slot="dark">
					<Icon name="radix-icons:moon" />
				</Fragment>
			</ThemSwitcher>
		</div>
	</nav>
</header>

<script is:inline>
	const header = document.querySelector("header");
	let prevScrollY = window.scrollY;
	let dy = 0;

	window.addEventListener("scroll", () => {
		dy = prevScrollY - window.scrollY;

		if (dy > 0) {
			header.classList.add("scrolled-up");
			header.classList.remove("scrolled-down");
		} else if (window.scrollY > window.innerHeight * 0.2) {
			header.classList.add("scrolled-down");
			header.classList.remove("scrolled-up");
		}

		prevScrollY = window.scrollY;
	});
</script>

<style>
	header {
		background: hsla(var(--color-primary), 0.8);
		border-bottom: 3px solid hsl(var(--color-primary));
		border-image-slice: 1;
		border-image-source: linear-gradient(
			90deg,
			hsl(var(--color-accent)),
			hsl(var(--color-accent-1))
		);
		transition: all 0.3s ease-in-out;
	}
	header.scrolled-up {
		transform: translateY(0);
	}
	header.scrolled-down {
		transform: translateY(-100%);
	}
	header::before {
		content: "";
		background-image: url(/grain.png);
		background-size: contain;
		filter: brightness(10%);
		opacity: 0.2;
		position: absolute;
		inset: 0;
		z-index: -1;
		mask-image: linear-gradient(45deg, #000a, transparent);
	}
</style>
